Provide Email ===> Forgot Password Request ===> Generates a Link & Send to Provide email ===> Open Email & Click Link ===> redirect to action for changing password ===> Change password & redirect to login action

Steps  :
	Create EmailSender 
	install NETCore.MailKit in solution
	Add code column in user table in database

		1- create EmailConfiguration in appsetting

			"EmailConfiguration": {
			  "From": "mohamed.elsayed7964@gmail.com",
			  "SmtpServer": "smtp.gmail.com",
			  "Port": 465,
			  "UserName": "mohamed.elsayed7964@gmail.com",
			  "Password": "gstr zlmb nwmo iwln",
			  "AppName": "Dyslexia"
			}

		2- create EmailConfiguration class in modle file to map on app setting
			
			public class EmailConfiguration
			{
			    public string From { get; set; }
			    public string SmtpServer { get; set; }
			    public int Port { get; set; }
			    public string UserName { get; set; }
			    public string Password { get; set; }
			}

		3- Add Services in program file 

			var emailConfig = builder.Configuration
		        .GetSection("EmailConfiguration")
		        .Get<EmailConfiguration>();
			builder.Services.AddSingleton(emailConfig);
    
			builder.Services.AddControllers();

		4- Enable Less Secure Apps With Gmail

			- Navigate to our Google Account – the account you will send the emails from (https://myaccount.google.com/)
			- In the menu on the left, we should select Security
			- Then under the “Signing in to Google” section, we can see that 2-Step Verification is off – so we have to click on it
			- Click Get Started, provide your password, and confirm the code by providing a mobile number
			- If everything goes well, you should see the Turn On option, so just click on it
		At this point, we have enabled our 2-Step verification and we can return to the Security page. There, under the same 
		“Signing in to Google” section, we can find the App passwords option set to None. 

		So, we have to:

			- Click on it
			- Provide a password
			- Click the Select app menu and choose the Other (Custom Name) option
			- Now, all we have to do is to provide any name we like for our app and click the Generate button

		5-  create Message Class in model file to map on your message

			public class Message
			{
			    public List<MailboxAddress> To { get; set; }
			    public string Subject { get; set; }
			    public string Content { get; set; }

			    public Message(IEnumerable<string> to, string subject, string content)
			    {
			        To = new List<MailboxAddress>();

			        To.AddRange(to.Select(x => new MailboxAddress(x,x)));
			        Subject = subject;
			        Content = content;        
			    }
			}

		6- create a IEmailSender interface in services file:

			public interface IEmailSender
			{
			    Task SendEmailAsync(Message message);
			}

		7- Create EmailSender class that implements this interface in services file:

			  public class EmailSender : IEmailSender
			  {
			        private readonly EmailConfiguration _emailConfiguration;

			        public EmailSender(EmailConfiguration emailConfiguration)
			        {
			            _emailConfiguration = emailConfiguration;
			        }

			        public async Task SendEmailAsync(Message message)
			        {
			            var emailMessage = CreateEmailMessage(message);
        			    await SendAsync(emailMessage);
			        }

		        private MimeMessage CreateEmailMessage(Message message)
		        {
		            var emailMessage = new MimeMessage();
		            emailMessage.From.Add(new MailboxAddress(_emailConfiguration.AppName,_emailConfiguration.From));
		            emailMessage.To.AddRange(message.To);
		            emailMessage.Subject = message.Subject;
		            emailMessage.Body = new TextPart(MimeKit.Text.TextFormat.Text) { Text = message.Content };

		            return emailMessage;
		        }

		        private async Task SendAsync(MimeMessage mailMessage)
		        {
		            using(var cliant = new SmtpClient())
		            {
		                try
		                {
		                    await cliant.ConnectAsync(_emailConfiguration.SmtpServer, _emailConfiguration.Port, true);
		                    cliant.AuthenticationMechanisms.Remove("XOAUTH2");
		                    await cliant.AuthenticateAsync(_emailConfiguration.UserName, _emailConfiguration.Password);
		                    await cliant.SendAsync(mailMessage);
		                }
		                catch
		                {
		                    throw new Exception("Error");
		                }
		                finally 
		                {
		                    await cliant.DisconnectAsync(true);
		                    cliant.Dispose();
		                }
		            }
		        }
		    }


		8- Create ForGotPassword controller
		   create first end point to right your email and send otp code

			private readonly IEmailSender _emailSender;
			private readonly UserManager<user> _userManger;

			public ForGotPassword(IEmailSender emailSender, UserManager<user> userManger)
			{
			    _emailSender = emailSender;
			    _userManger = userManger;
			}

			[HttpGet("SendResetPasswordCode")]
			public  async Task<string> SendResetPasswordCode(string email)
			{
			    try
			    {
			        //user
			        var user = await _userManger.FindByEmailAsync(email);
			        //user not Exist => not found
			        if (user == null)
			            return "UserNotFound";
			        //Generate Random Number

			        var chars = "0123456789";
			        var random = new Random();
			        var randomNumber = new string(Enumerable.Repeat(chars, 6).Select(s => s[random.Next(s.Length)]).ToArray());

			        //update User In Database Code
			        user.Code = randomNumber;
			        var updateResult =await  _userManger.UpdateAsync(user);
			        if (!updateResult.Succeeded)
			            return "ErrorInUpdateUser";
			        var message = new Message(new string[] { user.Email }, "OTP Code", "Code To Reset Passsword : " + user.Code);
			        //Send Code To  Email 
			        await _emailSender.SendEmailAsync(message);
			        return "Success";
			    }
			    catch
			    {
			        return "Failed";
			    }
			}

		9- Create Sec end Point to chack your email , code and change your password

			[HttpGet("ConfirmResetPassword")]

			public async Task<string> ConfirmResetPassword(string code, string email, string Password)
			{
			    //Get User
			    var user = await _userManger.FindByEmailAsync(email);
			    //user not Exist => not found
			    if (user == null)
			        return "UserNotFound";
			    //Decrept Code From Database User Code
			    var userCode = user.Code;
			    //Equal With Code
			    if (userCode == code)
			    {
			        await _userManger.RemovePasswordAsync(user);
			        if (!await _userManger.HasPasswordAsync(user))
			        {
			            var regex = new Regex(@"^(?=.*\d).{6,}$");
			            if (regex.IsMatch(Password))
			                await _userManger.AddPasswordAsync(user, Password);
			            else
			                return "The password must contain at least 6 letters and one number";
			        }
			        return "Success";
			    }
			    return "Failed";
			}